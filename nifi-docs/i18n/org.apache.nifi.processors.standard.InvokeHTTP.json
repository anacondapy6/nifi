{"capabilityDescription":{"en":"An HTTP client processor which can interact with a configurable HTTP Endpoint. The destination URL and HTTP Method are configurable. When the HTTP Method is PUT, POST or PATCH, the FlowFile contents are included as the body of the request and FlowFile attributes are converted to HTTP headers, optionally, based on configuration properties.","zh":"An HTTP client processor which can interact with a configurable HTTP Endpoint. The destination URL and HTTP Method are configurable. When the HTTP Method is PUT, POST or PATCH, the FlowFile contents are included as the body of the request and FlowFile attributes are converted to HTTP headers, optionally, based on configuration properties."},"dynamicProperties":{"post:form:<NAME>":{"en":{"description":"When the HTTP Method is POST, dynamic properties with the property name in the form of post:form:<NAME>, where the <NAME> will be the form data name, will be used to fill out the multipart form parts.  If send message body is false, the flowfile will not be sent, but any other form data will be.","value":"Attribute Expression Language"},"zh":{"description":"当HTTP方法为POST时，将使用属性名为POST:form:<name>的动态属性来填充多部分表单部分，其中<name>将是表单数据名。如果send-message-body为false，则不会发送流文件，但会发送任何其他表单数据。","value":"属性表达式语言"}},"Header Name":{"en":{"description":"Send request header with a key matching the Dynamic Property Key and a value created by evaluating the Attribute Expression Language set in the value of the Dynamic Property.","value":"Attribute Expression Language"},"zh":{"description":"发送具有与动态属性键匹配的键的请求头，以及通过计算在动态属性的值中设置的属性表达式语言创建的值。","value":"属性表达式语言"}}},"properties":{"Request Content-Encoding":{"en":{"displayName":"Request Content-Encoding","description":"HTTP Content-Encoding applied to request body during transmission. The receiving server must support the selected encoding to avoid request failures."},"zh":{"description":"传输期间应用于请求主体的HTTP内容编码。接收服务器必须支持所选编码以避免请求失败。","displayName":"请求内容编码"}},"proxy-configuration-service":{"en":{"displayName":"Proxy Configuration Service","description":"Specifies the Proxy Configuration Controller Service to proxy network requests. If set, it supersedes proxy settings configured per component. Supported proxies: SOCKS, HTTP + AuthN In case of SOCKS, it is not guaranteed that the selected SOCKS Version will be used by the processor."},"zh":{"description":"指定代理配置控制器服务以代理网络请求。如果设置，它将取代每个组件配置的代理设置。支持的代理：SOCKS、HTTP+AuthN如果是SOCKS，则不保证处理器将使用所选的SOCKS版本。","displayName":"代理配置服务"}},"Request Multipart Form-Data Filename Enabled":{"en":{"displayName":"Request Multipart Form-Data Filename Enabled","description":"Enable sending the FlowFile filename attribute as the filename parameter in the Content-Disposition Header for multipart/form-data HTTP requests."},"zh":{"description":"启用将FlowFile文件名属性作为多部分/表单数据HTTP请求的Content Disposition Header中的文件名参数发送。","displayName":"已启用请求多部分表单数据文件名"}},"Request Chunked Transfer-Encoding Enabled":{"en":{"displayName":"Request Chunked Transfer-Encoding Enabled","description":"Enable sending HTTP requests with the Transfer-Encoding Header set to chunked, and disable sending the Content-Length Header. Transfer-Encoding applies to the body in HTTP/1.1 requests as described in RFC 7230 Section 3.3.1"},"zh":{"description":"启用发送HTTP请求，并将传输编码头设置为分块，禁用发送内容长度头。传输编码适用于HTTP/1.1请求中的主体，如RFC 7230第3.3.1节所述","displayName":"已启用请求分块传输编码"}},"HTTP/2 Disabled":{"en":{"displayName":"HTTP/2 Disabled","description":"Disable negotiation of HTTP/2 protocol. HTTP/2 requires TLS. HTTP/1.1 protocol supported is required when HTTP/2 is disabled."},"zh":{"description":"禁用HTTP/2协议的协商。HTTP/2需要TLS。禁用HTTP/2时，需要支持HTTP/1.1协议。","displayName":"HTTP/2已禁用"}},"Connection Timeout":{"en":{"displayName":"Connection Timeout","description":"Maximum time to wait for initial socket connection to the HTTP URL."},"zh":{"description":"等待到HTTP URL的初始套接字连接的最长时间。","displayName":"连接超时"}},"Response Cookie Strategy":{"en":{"displayName":"Response Cookie Strategy","description":"Strategy for accepting and persisting HTTP cookies. Accepting cookies enables persistence across multiple requests."},"zh":{"description":"接受和持久化HTTP cookie的策略。接受cookie可实现跨多个请求的持久性。","displayName":"响应Cookie策略"}},"Request Password":{"en":{"displayName":"Request Password","description":"The password provided for authentication of HTTP requests. Encoded using Base64 for HTTP Basic Authentication as described in RFC 7617."},"zh":{"description":"为HTTP请求的身份验证提供的密码。如RFC 7617所述，使用Base64进行HTTP基本认证编码。","displayName":"请求密码"}},"Socket Read Timeout":{"en":{"displayName":"Socket Read Timeout","description":"Maximum time to wait for receiving responses from a socket connection to the HTTP URL."},"zh":{"description":"等待从套接字连接接收HTTP URL响应的最长时间。","displayName":"套接字读取超时"}},"Socket Idle Connections":{"en":{"displayName":"Socket Idle Connections","description":"Maximum number of idle connections to the HTTP URL."},"zh":{"description":"到HTTP URL的最大空闲连接数。","displayName":"套接字空闲连接"}},"Request Body Enabled":{"en":{"displayName":"Request Body Enabled","description":"Enable sending HTTP request body for PATCH, POST, or PUT methods."},"zh":{"description":"启用PATCH、POST或PUT方法的HTTP请求正文发送。","displayName":"请求正文已启用"}},"HTTP URL":{"en":{"displayName":"HTTP URL","description":"HTTP remote URL including a scheme of http or https, as well as a hostname or IP address with optional port and path elements. Any encoding of the URL must be done by the user."},"zh":{"description":"HTTP remote URL including a scheme of http or https, as well as a hostname or IP address with optional port and path elements. Any encoding of the URL must be done by the user.","displayName":"HTTP URL"}},"Request OAuth2 Access Token Provider":{"en":{"displayName":"Request OAuth2 Access Token Provider","description":"Enables managed retrieval of OAuth2 Bearer Token applied to HTTP requests using the Authorization Header."},"zh":{"description":"使用授权标头启用应用于HTTP请求的OAuth2承载令牌的托管检索。","displayName":"请求OAuth2访问令牌提供程序"}},"Socket Idle Timeout":{"en":{"displayName":"Socket Idle Timeout","description":"Maximum time to wait before closing idle connections to the HTTP URL."},"zh":{"description":"关闭与HTTP URL的空闲连接之前等待的最长时间。","displayName":"套接字空闲超时"}},"Response Redirects Enabled":{"en":{"displayName":"Response Redirects Enabled","description":"Enable following HTTP redirects sent with HTTP 300 series responses as described in RFC 7231 Section 6.4."},"zh":{"description":"如RFC 7231第6.4节所述，启用随HTTP 300系列响应发送的以下HTTP重定向。","displayName":"已启用响应重定向"}},"Socket Write Timeout":{"en":{"displayName":"Socket Write Timeout","description":"Maximum time to wait for write operations while sending requests from a socket connection to the HTTP URL."},"zh":{"description":"Maximum time to wait for write operations while sending requests from a socket connection to the HTTP URL.","displayName":"Socket Write Timeout"}},"Request Header Attributes Pattern":{"en":{"displayName":"Request Header Attributes Pattern","description":"Regular expression that defines which FlowFile attributes to send as HTTP headers in the request. If not defined, no attributes are sent as headers. Dynamic properties will be always be sent as headers. The dynamic property name will be the header key and the dynamic property value, interpreted as Expression Language, will be the header value. Attributes and their values are limited to ASCII characters due to the requirement of the HTTP protocol."},"zh":{"description":"Regular expression that defines which FlowFile attributes to send as HTTP headers in the request. If not defined, no attributes are sent as headers. Dynamic properties will be always be sent as headers. The dynamic property name will be the header key and the dynamic property value, interpreted as Expression Language, will be the header value. Attributes and their values are limited to ASCII characters due to the requirement of the HTTP protocol.","displayName":"请求标头属性模式"}},"Response FlowFile Naming Strategy":{"en":{"displayName":"Response FlowFile Naming Strategy","description":"Determines the strategy used for setting the filename attribute of FlowFiles transferred to the Response relationship."},"zh":{"description":"确定用于设置传输到响应关系的FlowFiles的文件名属性的策略。","displayName":"响应流文件命名策略"}},"Response Cache Enabled":{"en":{"displayName":"Response Cache Enabled","description":"Enable HTTP response caching described in RFC 7234. Caching responses considers ETag and other headers."},"zh":{"description":"启用RFC 7234中描述的HTTP响应缓存。缓存响应考虑ETag和其他标头。","displayName":"已启用响应缓存"}},"Request Date Header Enabled":{"en":{"displayName":"Request Date Header Enabled","description":"Enable sending HTTP Date Header on HTTP requests as described in RFC 7231 Section 7.1.1.2."},"zh":{"description":"如RFC 7231第7.1.1.2节所述，启用在HTTP请求上发送HTTP数据头。","displayName":"请求日期标头已启用"}},"Request Failure Penalization Enabled":{"en":{"displayName":"Request Failure Penalization Enabled","description":"Enable penalization of request FlowFiles when receiving HTTP response with a status code between 400 and 499."},"zh":{"description":"当收到状态代码介于400和499之间的HTTP响应时，启用对请求FlowFiles的惩罚。","displayName":"请求失败惩罚已启用"}},"Response Body Attribute Size":{"en":{"displayName":"Response Body Attribute Size","description":"Maximum size in bytes applied when writing an HTTP response body to a FlowFile attribute. Attributes exceeding the maximum will be truncated."},"zh":{"description":"将HTTP响应正文写入FlowFile属性时应用的最大字节数。超过最大值的属性将被截断。","displayName":"响应正文属性大小"}},"SSL Context Service":{"en":{"displayName":"SSL Context Service","description":"SSL Context Service provides trusted certificates and client certificates for TLS communication."},"zh":{"description":"SSL上下文服务为TLS通信提供可信证书和客户端证书。","displayName":"SSL上下文服务"}},"Response Generation Required":{"en":{"displayName":"Response Generation Required","description":"Enable generation and transfer of a FlowFile to the Response relationship regardless of HTTP response received."},"zh":{"description":"无论收到的HTTP响应如何，都能生成FlowFile并将其传输到响应关系。","displayName":"需要生成响应"}},"Request User-Agent":{"en":{"displayName":"Request User-Agent","description":"HTTP User-Agent Header applied to requests. RFC 7231 Section 5.5.3 describes recommend formatting."},"zh":{"description":"应用于请求的HTTP用户代理标头。RFC 7231第5.5.3节描述了建议的格式。","displayName":"请求用户代理"}},"Response Header Request Attributes Enabled":{"en":{"displayName":"Response Header Request Attributes Enabled","description":"Enable adding HTTP response headers as attributes to FlowFiles transferred to the Original relationship."},"zh":{"description":"启用将HTTP响应标头作为属性添加到传输到原始关系的FlowFiles。","displayName":"响应标头请求属性已启用"}},"HTTP Method":{"en":{"displayName":"HTTP Method","description":"HTTP request method (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS). Arbitrary methods are also supported. Methods other than POST, PUT and PATCH will be sent without a message body."},"zh":{"description":"HTTP请求方法（GET、POST、PUT、PATCH、DELETE、HEAD、OPTIONS）。还支持任意方法。POST、PUT和PATCH以外的方法将在没有消息体的情况下发送。","displayName":"HTTP方法"}},"Request Username":{"en":{"displayName":"Request Username","description":"The username provided for authentication of HTTP requests. Encoded using Base64 for HTTP Basic Authentication as described in RFC 7617."},"zh":{"description":"为HTTP请求的身份验证提供的用户名。如RFC 7617所述，使用Base64进行HTTP基本认证编码。","displayName":"请求用户名"}},"Request Content-Type":{"en":{"displayName":"Request Content-Type","description":"HTTP Content-Type Header applied to when sending an HTTP request body for PATCH, POST, or PUT methods. The Content-Type defaults to application/octet-stream when not configured."},"zh":{"description":"为PATCH、POST或PUT方法发送HTTP请求正文时应用的HTTP内容类型标头。未配置时，内容类型默认为应用程序/八位字节流。","displayName":"请求内容类型"}},"Response Body Attribute Name":{"en":{"displayName":"Response Body Attribute Name","description":"FlowFile attribute name used to write an HTTP response body for FlowFiles transferred to the Original relationship."},"zh":{"description":"用于为传输到原始关系的FlowFiles编写HTTP响应体的FlowFile属性名称。","displayName":"响应正文属性名称"}},"Request Digest Authentication Enabled":{"en":{"displayName":"Request Digest Authentication Enabled","description":"Enable Digest Authentication on HTTP requests with Username and Password credentials as described in RFC 7616."},"zh":{"description":"使用RFC 7616中描述的用户名和密码凭据对HTTP请求启用摘要式身份验证。","displayName":"已启用请求摘要身份验证"}},"Request Multipart Form-Data Name":{"en":{"displayName":"Request Multipart Form-Data Name","description":"Enable sending HTTP request body formatted using multipart/form-data and using the form name configured."},"zh":{"description":"启用使用多部分/表单数据和配置的表单名称发送格式化的HTTP请求正文。","displayName":"请求多部分表单数据名称"}},"Response Cache Size":{"en":{"displayName":"Response Cache Size","description":"Maximum size of HTTP response cache in bytes. Caching responses considers ETag and other headers."},"zh":{"description":"HTTP响应缓存的最大大小（字节）。缓存响应考虑ETag和其他标头。","displayName":"响应缓存大小"}},"Response Body Ignored":{"en":{"displayName":"Response Body Ignored","description":"Disable writing HTTP response FlowFiles to Response relationship"},"zh":{"description":"禁用将HTTP响应FlowFiles写入响应关系","displayName":"忽略响应正文"}}},"relationships":{"Response":{"en":"Response FlowFiles transferred when receiving HTTP responses with a status code between 200 and 299.","zh":"收到状态代码介于200和299之间的HTTP响应时传输的响应流文件。"},"No Retry":{"en":"Request FlowFiles transferred when receiving HTTP responses with a status code between 400 an 499.","zh":"收到状态代码介于400和499之间的HTTP响应时传输的请求流文件。"},"Retry":{"en":"Request FlowFiles transferred when receiving HTTP responses with a status code between 500 and 599.","zh":"收到状态代码介于500和599之间的HTTP响应时传输的请求流文件。"},"Original":{"en":"Request FlowFiles transferred when receiving HTTP responses with a status code between 200 and 299.","zh":"收到状态代码介于200和299之间的HTTP响应时传输的请求流文件。"},"Failure":{"en":"Request FlowFiles transferred when receiving socket communication errors.","zh":"接收套接字通信错误时传输的请求FlowFiles。"}},"tags":{"en":["http","https","rest","client"],"zh":["http","https","休息","客户"]},"writeAttributes":{"invokehttp.request.url":{"en":"The original request URL","zh":"原始请求URL"},"invokehttp.response.url":{"en":"The URL that was ultimately requested after any redirects were followed","zh":"遵循任何重定向后最终请求的URL"},"invokehttp.tx.id":{"en":"The transaction ID that is returned after reading the response","zh":"读取响应后返回的事务ID"},"invokehttp.status.code":{"en":"The status code that is returned","zh":"返回的状态代码"},"invokehttp.response.body":{"en":"In the instance where the status code received is not a success (2xx) then the response body will be put to the 'invokehttp.response.body' attribute of the request FlowFile.","zh":"在收到的状态代码不是成功（2xx）的实例中，响应主体将被置于“invokehttp.response”中。请求FlowFile的“body”属性。"},"invokehttp.remote.dn":{"en":"The DN of the remote server","zh":"远程服务器的DN"},"user-defined":{"en":"If the 'Put Response Body In Attribute' property is set then whatever it is set to will become the attribute key and the value would be the body of the HTTP response.","zh":"如果设置了“将响应正文放入属性”属性，则无论其设置为什么，都将成为属性键，并且该值将是HTTP响应的正文。"},"invokehttp.status.message":{"en":"The status message that is returned","zh":"返回的状态消息"},"invokehttp.request.duration":{"en":"Duration (in milliseconds) of the HTTP call to the external endpoint","zh":"对外部端点的HTTP调用的持续时间（毫秒）"},"invokehttp.java.exception.message":{"en":"The Java exception message raised when the processor fails","zh":"处理器出现故障时引发的Java异常消息"},"invokehttp.java.exception.class":{"en":"The Java exception class raised when the processor fails","zh":"处理器出现故障时引发的Java异常类"}}}