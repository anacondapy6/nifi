{"capabilityDescription":{"en":"This processor de-duplicates individual records within a record set. It can operate on a per-file basis using an in-memory hashset or bloom filter. When configured with a distributed map cache, it de-duplicates records across multiple files.","zh":"This processor de-duplicates individual records within a record set. It can operate on a per-file basis using an in-memory hashset or bloom filter. When configured with a distributed map cache, it de-duplicates records across multiple files."},"dynamicProperties":{"Name of the property.":{"en":{"description":"A record's cache key is generated by combining the name of each dynamic property with its evaluated record value (as specified by the corresponding RecordPath).","value":"A valid RecordPath to the record field to be included in the cache key used for deduplication."},"zh":{"description":"A record's cache key is generated by combining the name of each dynamic property with its evaluated record value (as specified by the corresponding RecordPath).","value":"A valid RecordPath to the record field to be included in the cache key used for deduplication."}}},"properties":{"distributed-map-cache":{"en":{"displayName":"Distributed Map Cache client","description":"This property is required when the deduplication strategy is set to 'multiple files.' The map cache will for each record, atomically check whether the cache key exists and if not, set it."},"zh":{"description":"This property is required when the deduplication strategy is set to 'multiple files.' The map cache will for each record, atomically check whether the cache key exists and if not, set it.","displayName":"分布式地图缓存客户端"}},"put-cache-identifier":{"en":{"displayName":"Cache the Entry Identifier","description":"For each record, check whether the cache identifier exists in the distributed map cache. If it doesn't exist and this property is true, put the identifier to the cache."},"zh":{"description":"For each record, check whether the cache identifier exists in the distributed map cache. If it doesn't exist and this property is true, put the identifier to the cache.","displayName":"Cache the Entry Identifier"}},"filter-capacity-hint":{"en":{"displayName":"Filter Capacity Hint","description":"An estimation of the total number of unique records to be processed. The more accurate this number is will lead to fewer false negatives on a BloomFilter."},"zh":{"description":"要处理的唯一记录总数的估计值。这个数字越精确，BloomFilter上的假阴性就越少。","displayName":"过滤器容量提示"}},"record-writer":{"en":{"displayName":"Record Writer","description":"Specifies the Controller Service to use for writing out the records"},"zh":{"description":"指定用于写入记录的控制器服务","displayName":"记录编写器"}},"deduplication-strategy":{"en":{"displayName":"Deduplication Strategy","description":"The strategy to use for detecting and routing duplicate records. The option for detecting duplicates across a single FlowFile operates in-memory, whereas detection spanning multiple FlowFiles utilises a distributed map cache."},"zh":{"description":"The strategy to use for detecting and routing duplicate records. The option for detecting duplicates across a single FlowFile operates in-memory, whereas detection spanning multiple FlowFiles utilises a distributed map cache.","displayName":"重复数据消除战略"}},"record-hashing-algorithm":{"en":{"displayName":"Record Hashing Algorithm","description":"The algorithm used to hash the cache key."},"zh":{"description":"The algorithm used to hash the cache key.","displayName":"记录哈希算法"}},"cache-identifier":{"en":{"displayName":"Cache Identifier","description":"An optional expression language field that overrides the record's computed cache key. This field has an additional attribute available: ${record.hash.value}, which contains the cache key derived from dynamic properties (if set) or record fields."},"zh":{"description":"An optional expression language field that overrides the record's computed cache key. This field has an additional attribute available: ${record.hash.value}, which contains the cache key derived from dynamic properties (if set) or record fields.","displayName":"缓存标识符"}},"record-reader":{"en":{"displayName":"Record Reader","description":"Specifies the Controller Service to use for reading incoming data"},"zh":{"description":"指定用于读取传入数据的控制器服务","displayName":"记录读取器"}},"include-zero-record-flowfiles":{"en":{"displayName":"Include Zero Record FlowFiles","description":"If a FlowFile sent to either the duplicate or non-duplicate relationships contains no records, a value of `false` in this property causes the FlowFile to be dropped. Otherwise, the empty FlowFile is emitted."},"zh":{"description":"If a FlowFile sent to either the duplicate or non-duplicate relationships contains no records, a value of `false` in this property causes the FlowFile to be dropped. Otherwise, the empty FlowFile is emitted.","displayName":"包括零记录流文件"}},"filter-type":{"en":{"displayName":"Filter Type","description":"The filter used to determine whether a record has been seen before based on the matching RecordPath criteria. If hash set is selected, a Java HashSet object will be used to deduplicate all encountered records. If the bloom filter option is selected, a bloom filter will be used. The bloom filter option is less memory intensive, but has a chance of having false positives."},"zh":{"description":"用于根据匹配的RecordPath条件确定以前是否看到过记录的筛选器。如果选择了哈希集，则将使用Java HashSet对象对所有遇到的记录进行重复数据消除。如果选择布隆过滤器选项，将使用布隆过滤器。布隆过滤器选项的内存占用较少，但有可能出现误报。","displayName":"过滤器类型"}},"bloom-filter-certainty":{"en":{"displayName":"Bloom Filter Certainty","description":"The desired false positive probability when using the BloomFilter type. Using a value of .05 for example, guarantees a five-percent probability that the result is a false positive. The closer to 1 this value is set, the more precise the result at the expense of more storage space utilization."},"zh":{"description":"使用BloomFilter类型时所需的假阳性概率。例如，使用0.05的值，可以保证结果为假阳性的概率为5%。该值设置得越接近1，结果就越精确，但存储空间利用率越高。","displayName":"Bloom过滤器确定性"}}},"relationships":{"original":{"en":"The original input FlowFile is sent to this relationship unless a fatal error occurs.","zh":"The original input FlowFile is sent to this relationship unless a fatal error occurs."},"failure":{"en":"If unable to communicate with the cache, the FlowFile will be penalized and routed to this relationship","zh":"如果无法与缓存通信，FlowFile将受到惩罚并路由到此关系"},"non-duplicate":{"en":"Records not found in the cache are routed to this relationship.","zh":"Records not found in the cache are routed to this relationship."},"duplicate":{"en":"Records detected as duplicates are routed to this relationship.","zh":"Records detected as duplicates are routed to this relationship."}},"systemResourceConsiderations":{"en":["The HashSet filter type will grow memory space proportionate to the number of unique records processed. The BloomFilter type will use constant memory regardless of the number of records processed.","If a more advanced hash algorithm is chosen, the amount of time required to hash any particular record could increase substantially."],"zh":["HashSet筛选器类型将根据处理的唯一记录的数量增加内存空间。BloomFilter类型将使用恒定内存，而不考虑处理的记录数。","如果选择更高级的哈希算法，则哈希任何特定记录所需的时间可能会大幅增加。"]},"tags":{"en":["text","record","update","change","replace","modify","distinct","unique","filter","hash","dupe","duplicate","dedupe"],"zh":["文本","记录","使现代化","改变","代替","修改","不同的","唯一的","滤器","搞砸","欺骗","复制","重复数据消除"]},"writeAttributes":{"record.count":{"en":"Number of records written to the destination FlowFile.","zh":"Number of records written to the destination FlowFile."}}}